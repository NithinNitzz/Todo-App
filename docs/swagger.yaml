definitions:
  models.Task:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      due_date:
        type: string
      id:
        type: integer
      name:
        example: learn golang
        type: string
      status:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.Users'
      user_id:
        type: integer
    type: object
  models.Users:
    properties:
      id:
        type: integer
      password:
        maxLength: 15
        minLength: 3
        type: string
      username:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login for  user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.Users'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
      summary: Login a user
      tags:
      - user
  /register:
    post:
      consumes:
      - application/json
      description: add a new user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.Users'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
      summary: Register a user
      tags:
      - user
  /tasks:
    post:
      consumes:
      - application/json
      description: create a new task
      parameters:
      - description: Task object to be created
        in: body
        name: t
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: create a task
      tags:
      - Task
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a task by id
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: Delete a task
      tags:
      - Task
    get:
      consumes:
      - application/json
      description: Get a task by id
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: Get a task
      tags:
      - Task
    put:
      consumes:
      - application/json
      description: update ex task
      operationId: taskID
      parameters:
      - description: Task id
        in: path
        name: id
        required: true
        type: string
      - description: Task object to be updated
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: update a task
      tags:
      - Task
  /tasks/{id}/complete:
    patch:
      consumes:
      - application/json
      description: complete a task by id
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task completed
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: complete a task
      tags:
      - Task
  /tasks/tempdel/{id}:
    delete:
      consumes:
      - application/json
      description: tem delete a task by id
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: ' tem delete task'
        in: body
        name: id
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: tem delete a task
      tags:
      - Task
  /users:
    post:
      consumes:
      - application/json
      description: create a new task
      parameters:
      - description: Task object to be created
        in: body
        name: u
        required: true
        schema:
          $ref: '#/definitions/models.Users'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
      summary: create a task
      tags:
      - Users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get a task by id
      parameters:
      - description: Users Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Users'
      summary: Get a User task
      tags:
      - Users
  /users/{user_id}/tasks:
    get:
      consumes:
      - application/json
      description: list all tasks by id
      parameters:
      - description: Users_ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: list all
      tags:
      - Task
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
